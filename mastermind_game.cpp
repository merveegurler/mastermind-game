#include<iostream>
#include<string>
#include<cstdlib>
#include<cmath>
using namespace std;
void toFindMatch(int digit[], int guessDigit[], int size){//function to find and print the Cexact and Cmisplaced
    int C=0, Cmisplaced=0, Cexact=0;//C holds the all repeated numbers, Cexact holds numbers which are in the correct place
    for (int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            if(digit[i] == guessDigit[j])
                C++;
            if(i == j && digit[i] == guessDigit[j])
               Cexact++;
        }
    }
    Cmisplaced = C-Cexact;
    cout << Cexact << " " << Cmisplaced << endl;
}
int repetitive(int digit[], int size){//function for finding the repeated in the number which user enters or entered by command-line
    for (int p = 0; p < size; p++)
        for(int r = p+1; r < size; r++)
            if(digit[p] == digit[r]){
               return 1;
            }
    return 0;
}
int is_all_integer(int max_digit, string secret){//function to find if any character which is different from integer in the given number
    int i = 0, j = max_digit;
    while(j){
        int a = secret[i] - '0';
            if(a < 0)
                break;
            if(a < 0 || a > 9)
                return 0;
            j--;
            i++;
   }
}
    
int main(int argc, char **argv){
    const int argcNumber = 3;//constant for argc number
    const int size =atoi(argv[argcNumber-1]);//constant for the number which comes after the -r
    const int max_count = 100;//constant for maximum number of guessing numbers that entering from user
    const int max_digit = 9;//constant for max digit it is 10 obviously
    int secretNumber = 0,//for argument "-r" it is generated by randomly, for argument "-u" it is given by user 
        guessNumber = 0,//user's guess
        digit[size];//for hold secret number's digits
    string a = "-u",b = "-r", c = "./mastermind";//these strings for error checking
    
    srand(time(0));//to generating random numbers
    int is_correct = 0,//created for error checking
        count = 1;//iteration count
    
    if(argc != argcNumber)//if commend-line arguments are greater than or less than 3
        is_correct = 1;
    if(argv[argcNumber-2] != a && argv[argcNumber-2] != b)//if second argument is not "-r" or "-u"
        is_correct = 1;
    if(argv[argcNumber-2] == b && atoi(argv[argcNumber-1]) <= 0 )//if second argument is "-r" and third argument is less than or equal to 0 
        is_correct = 1;                                                                                       
    if(argv[argcNumber-2] == b && atoi(argv[argcNumber-1]) > 9 )//if second argument is "-r" and third argument is greater than 9
        is_correct = 1; 

    if(is_correct == 1)//if the errors(that given before) occurs
        cout<< "E0"<< endl;
    else{
        if(argv[argcNumber-2] == a){//if argument 2 is "-u"
            string secret = argv[argcNumber-1];//argument 3 is the secret number but in characters
            int is_integer = 1;
            is_integer = is_all_integer(max_digit, secret);
            if(is_integer == 0)
                cout << "E0" << endl;
            if(is_integer != 0){//if secret number is an integer
                secretNumber = atoi(argv[argcNumber-1]);//to convert it to integer i use atoi function
            	int y = secretNumber,// i assign secret number to y to use secret number again and again 
            	k = 0,//to count number of digits of secret number
            	is_repetitive = 0;//to check
            	if(y == 0)//if secret number is 0
            	    k = 1;//it has 1 digit
            	else{
            	    while(y != 0){//by dividing secret number to 10 i found how much digit it has
            	        y /= 10;
            	        k++;
            	    }
            	}
            	int n = k,//to hold k's original value i assign it to another value
            		m = 0,//to put digits of secret number to digit array
            	    hold1;
            	        
            	while(n){//this loop for seperating the secret number digit by digit
            	    hold1 = secretNumber / pow(10, k-m-1);
            	    digit[m] = hold1 % 10;
            	    n--;
            	    m++;
            	}
            	is_repetitive = repetitive(digit, k);
            	if(is_repetitive)//if secret number has repeated digits
            	    cout << "E0"<<endl;
            	string guess;
            	if(is_repetitive != 1 && is_integer != 0){//if secret number has unique digits and it is not include words
            	    cin >> guess;
            	    is_integer = is_all_integer(max_digit, guess);
            	    if(!is_all_integer(max_digit, guess))//if number includes characters different from integer
            	        cout<< "E2"<<endl;
            	    else
           		    	guessNumber = stoi(guess);
            	}
            	while(guessNumber != secretNumber && count <= max_count && is_repetitive != 1 && is_integer != 0){
            	    int n = guessNumber, m = 0, hold2, guessDigit[k];
            	    if(n == 0){//if user enters 0, i create that if because if user enter 0 in the else part program crushes
            	        k = 1;//it has 1 digit
            	        m = 1;
            	    }else{
            	        while(n != 0){
            	            n /= 10;
            	            hold2 = guessNumber / pow(10, k-m-1);
            	            guessDigit[m] = hold2 % 10;
            	            m++;
            	        }
            	    }
            	    if(!repetitive(guessDigit, k) && m == k){//m holds the number of digits of the number which entered by user, k holds the number of digits of the number which secret number has
            	        toFindMatch(digit, guessDigit, k);    
            	    	count++;
            	    	cin >> guess;
            	    	is_integer= is_all_integer(max_digit, guess);
            	    	if(is_integer == 0 )//if it is 0 it means number has words in it
            	            cout << "E2"<< endl;
            	        else
            	            guessNumber = stoi(guess);
            	    }else{//if number includes repeated digits, or it is longer or shorter than than the expected
            	        cout<< "E1"<< endl;
            	        break;
            	    }
            	}
            	if(guessNumber == secretNumber && count <= max_count && is_repetitive !=1)
            	    cout<< "FOUND" << " "<< count<< endl;
            	if(count > max_count && is_repetitive != 1)
            	    cout<< "FAILED" <<endl;
       		}	
        }else{//if argument 3 is "-r"
            string secret = argv[argcNumber-1];//third command line argument is the number of digit
            int is_integer = 1;
            is_integer = is_all_integer(max_digit, secret);
            if(is_integer == 0)
                cout << "E0" << endl;//if it includes words in it
            if(is_integer != 0){
                int k;
                for(k = 0; k < size; k++){
                    if(k == 0 && size == 1)//if number of digit equals to 1
                        digit[k] = rand()%9;
                    else if(k == 0 && size != 0){//if number of digit greater than 1
                        digit[k] = rand()%8 + 1;//first digit can not be 0
                    }else{
                        digit[k] = rand()%9;
                        for(int t = 0; t < k; t++){
                            if(digit[t] == digit[k])//to do all digits unique
                                while(digit[t] == digit[k]){
                                    digit[k] = rand()%9;
                                    t = 0;
                                }
                        }
                    }
                    secretNumber += digit[k] * pow(10, size-k-1);
                }
                string guess;
                if(is_integer != 0){//if secret number has unique digits and it is not include words
                    cin >> guess;
                    is_integer = is_all_integer(max_digit, guess);
                    if(is_integer == 0)
                        cout << "E2" << endl;
                    else
                        guessNumber = stoi(guess);
                }
                int dgt = guessNumber, guessDigit[size]/*to hold guess Number's digits*/, hold;
                while(guessNumber != secretNumber && count <= max_count && is_integer != 0){
                    int n;
                    dgt = guessNumber;
                    if(guessNumber == 0){
                        n = 1;
                        guessDigit[n] = guessNumber;
                    }
                    else{
                        for(n = 0; n < size; n++){//to seperate guess number digit by digit
                            dgt /= 10;
                            hold = guessNumber / pow(10, k-n-1);
                            guessDigit[n] = hold % 10;
                        }
                    }
                    if(n == size){//if number is valid
                        if(!repetitive(guessDigit, n)){//if number is unique
                            if(dgt != 0 || guessDigit[0] == 0){
                        		cout<< "E1"<< endl;
                                break;
                            }else{
                                toFindMatch(digit, guessDigit, k);
                                count++;
                                cin >> guess;
                                is_integer = is_all_integer(max_digit, guess);
                                if(is_integer == 0)
                                    cout << "E2"<< endl;
                                else
                                    guessNumber = stoi(guess);
                                    
                            }
                        }else{
                            cout << "E1" << endl;
                            break;
                        }
                    }
                }
                if(guessNumber == secretNumber && count <= max_count)
                	cout << "FOUND" << " "<< count<<endl;
                if(count > max_count)
                    cout << "FAILED"<< endl;
            }
        }
    }
    return 0; 
}
